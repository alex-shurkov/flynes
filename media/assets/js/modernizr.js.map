{"version":3,"sources":["modernizr.js"],"names":["window","document","undefined","tests","ModernizrProto","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","name","fn","options","push","addAsyncTest","Modernizr","prototype","classes","docElement","documentElement","isSVG","nodeName","toLowerCase","createElement","arguments","createElementNS","call","apply","injectElementWithStyles","rule","callback","nodes","testnames","style","ret","node","docOverflow","body","mod","div","fake","parseInt","id","appendChild","type","styleSheet","cssText","createTextNode","background","overflow","parentNode","removeChild","offsetHeight","matchMedia","mq","msMatchMedia","mql","matches","bool","getComputedStyle","currentStyle","position","toucheventsTest","filter","touch","ua","navigator","userAgent","indexOf","console","warn","prefixes","split","_prefixes","testStyles","DocumentTouch","query","join","offsetTop","featureNames","feature","aliasIdx","result","nameIdx","featureNameSplit","featureIdx","hasOwnProperty","aliases","length","Boolean","testRunner","className","baseVal","reJS","RegExp","replace","setClasses","i"],"mappings":"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","file":"modernizr.js","sourcesContent":["/*!\n * modernizr v3.6.0\n * Build https://modernizr.com/download?-touchevents-mq-setclasses-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.6.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  /**\n   * Modernizr.mq tests a given media query, live against the current state of the window\n   * adapted from matchMedia polyfill by Scott Jehl and Paul Irish\n   * gist.github.com/786768\n   *\n   * @memberof Modernizr\n   * @name Modernizr.mq\n   * @optionName Modernizr.mq()\n   * @optionProp mq\n   * @access public\n   * @function mq\n   * @param {string} mq - String of the media query we want to test\n   * @returns {boolean}\n   * @example\n   * Modernizr.mq allows for you to programmatically check if the current browser\n   * window state matches a media query.\n   *\n   * ```js\n   *  var query = Modernizr.mq('(min-width: 900px)');\n   *\n   *  if (query) {\n   *    // the browser window is larger than 900px\n   *  }\n   * ```\n   *\n   * Only valid media queries are supported, therefore you must always include values\n   * with your media query\n   *\n   * ```js\n   * // good\n   *  Modernizr.mq('(min-width: 900px)');\n   *\n   * // bad\n   *  Modernizr.mq('min-width');\n   * ```\n   *\n   * If you would just like to test that media queries are supported in general, use\n   *\n   * ```js\n   *  Modernizr.mq('only all'); // true if MQ are supported, false if not\n   * ```\n   *\n   *\n   * Note that if the browser does not support media queries (e.g. old IE) mq will\n   * always return false.\n   */\n\n  var mq = (function() {\n    var matchMedia = window.matchMedia || window.msMatchMedia;\n    if (matchMedia) {\n      return function(mq) {\n        var mql = matchMedia(mq);\n        return mql && mql.matches || false;\n      };\n    }\n\n    return function(mq) {\n      var bool = false;\n\n      injectElementWithStyles('@media ' + mq + ' { #modernizr { position: absolute; } }', function(node) {\n        bool = (window.getComputedStyle ?\n                window.getComputedStyle(node, null) :\n                node.currentStyle).position == 'absolute';\n      });\n\n      return bool;\n    };\n  })();\n\n\n  ModernizrProto.mq = mq;\n\n  \n/* eslint-disable spaced-comment */\n/*!\n{\n  \"name\": \"ie\",\n  \"property\": \"ie\"\n}\n!*/\n\n // eslint-disable-line no-undef\n\t/**\n\t * Определение браузера **ie**\n\t * @type {boolean}\n\t * @memberOf modernizrTests\n\t * @name ie\n\t */\n\tModernizr.addTest('ie', (document.documentMode));\n\n/* eslint-disable spaced-comment */\n/*!\n{\n  \"name\": \"mobiledevice\",\n  \"property\": \"mobiledevice\"\n}\n!*/\n\n // eslint-disable-line no-undef\n\t/**\n\t * Определение мобильных устройств\n\t * @type {boolean}\n\t * @memberOf modernizrTests\n\t * @name mobiledevice\n\t */\n\tModernizr.addTest('mobiledevice', function () {\n\t\tvar toucheventsTest = tests.filter(function (test) {\n\t\t\treturn test.name === 'touchevents';\n\t\t});\n\t\tif (toucheventsTest) {\n\t\t\tvar touch = toucheventsTest[0].fn();\n\t\t\tvar ua = window.navigator.userAgent.toLowerCase();\n\t\t\treturn touch && !!((~ua.indexOf('iphone') || ~ua.indexOf('ipod') || ~ua.indexOf('ipad') || ~ua.indexOf('android')) || (/\\sEdgA\\//i.test(ua) || /\\sEdgiOS\\//i.test(ua) || /Windows\\sPhone/i.test(ua)));\n\t\t}\n\t\tconsole.warn('Modernizr `touchevents` test is required to make test `mobiledevice`!');\n\t\treturn false;\n\t});\n\n\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['','']);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  \n\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  \n/*!\n{\n  \"name\": \"Touch Events\",\n  \"property\": \"touchevents\",\n  \"caniuse\" : \"touch\",\n  \"tags\": [\"media\", \"attribute\"],\n  \"notes\": [{\n    \"name\": \"Touch Events spec\",\n    \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n  }],\n  \"warnings\": [\n    \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n  ],\n  \"knownBugs\": [\n    \"False-positive on some configurations of Nokia N900\",\n    \"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n  ]\n}\n!*/\n/* DOC\nIndicates if the browser supports the W3C Touch Events API.\n\nThis *does not* necessarily reflect a touchscreen device:\n\n* Older touchscreen devices only emulate mouse events\n* Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n* Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n* Future browsers may implement other event models for touch interactions\n\nSee this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n\nIt's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n\nThis test will also return `true` for Firefox 4 Multitouch support.\n*/\n\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n  Modernizr.addTest('touchevents', function() {\n    var bool;\n    if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n      bool = true;\n    } else {\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n      testStyles(query, function(node) {\n        bool = node.offsetTop === 9;\n      });\n    }\n    return bool;\n  });\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);"]}